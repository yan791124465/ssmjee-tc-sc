<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <description>Shiro安全配置</description>

    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">

        <!--单个realm使用realm,如果有多个realm，使用realms属性代替-->
        <property name="realm" ref="adminDbRealm" />

        <!--将缓存管理器，交给安全管理器-->
        <property name="cacheManager" ref="shiroCacheManager" />

    </bean>


    <!--realm配置，realm是shiro的桥梁，它主要是用来判断subject是否可以登录及权限等-->
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
    <bean id="adminDbRealm" class="com.jee.ssm.common.shiro.AdminDbRealm" >
        <property name="cachingEnabled" value="false" />
    </bean>




    <!--shiro过滤器配置，bean的id值须与web中的filter-name的值相同-->
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager" />

        <!-- 默认的登陆访问url -->
        <property name="loginUrl" value="/login" />

        <!-- 登陆成功后跳转的url -->
        <property name="successUrl" value="/" />

        <!-- 没有权限跳转的url -->
        <property name="unauthorizedUrl" value="/login" />

        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- 介绍 http://blog.csdn.net/jadyer/article/details/12172839 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
        <property name="filterChainDefinitions">

            <value>
                <!--
                    anon  不需要认证
                    authc 需要认证
                    user  验证通过或RememberMe登录的都可以
                -->
                /static/**=anon
                /images/**=anon
                /login/**=anon
                /login/logout=logout
                /**=authc
            </value>

        </property>

    </bean>


    <!-- 在方法中 注入  securityManager ，进行代理控制 -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">

        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>

        <property name="arguments" ref="securityManager"/>

    </bean>


    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- AOP式方法级权限检查 已经指定动态代理代替 -->
<!--    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>-->

</beans>